=README=

Expression hook is about getting more grip on your code. It can be used to gather statistics.

One thing i do with it is standardly package my projects. See below for emacs-lisp to 
single-command this.

==Project contains==

* Expression hook, a function called on every expression.
  + Needs the scanned code to be availabe for running since it needs the macros.
  + TODO is to try/test the 'adapters' to be able to use `*macroexpand-hook* also.

* Expression scan, which uses to hook to collect a bunch of data.
  + Symbol-dependencies between packages, unfortunately does not detect all dependencies,
    as generics can be extended by `defmethod` without connecting any symbol.
  + Dependencies between functions, dependence of functions on variables.

* gil-autodoc, autodocumentation in.. gil.. I haven't made put any gil out there. Note that a 
  lot of the documentation strings have markup like stuff in them.(Hoping to later add markup 
  to autodocumentation)

* package-project which generates .asd files, and standardizes folder organization.
  + NOTE: for one, `defmethod` can make packages depend on each other that is *not* detected!
  + note: system names not corresponding to package names need to be reported. For instance 
   :alexandria.0.dev is defaultly mapped to alexandria. See `package-project:package-info`.

* Two packages that provide functions for to package-project allowing autodocumentation to be 
 applied automatically. (One of documentation-template, one gil-autodoc)

==Dependencies==

The asd files describe this, of course.

* The other github project [j-basic](https://github.com/o-jasper/j-basic). 
  (`git@github.com:o-jasper/j-basic.git`)

* [alexandria](http://common-lisp.net/project/alexandria/) used throughout. 
* [cl-fad](http://weitz.de/cl-fad/). (Probably should get rid of this dependency)
* [j-basic](https://github.com/o-jasper/j-basic).
* As said, gil-autodoc depends on unreleased stuff(gil-def,gil-html) at the moment. So 
everything based on those is a bit moot. Hopefully i will fix that soon.

==Further notes==
Wrote some of this quite a bit ago, if i re-did it, it would be a bit different. Probably would
 get rid of `denest` use.

==Usage of package-project

Make the directories your-projects/the-project/src/, the main .lisp files in src/ otherwise:

 tests                                               src/test/
 examples                                            src/example/
 'messing about' (since a mess, might not have .asd) src/try/
 machine readable documentation/autodoc assistance   src/doc/
 guis for stuff                                      src/gui/
 data 'for code'                                     src/data/

You can extend the idea, but be careful so that it makes sense, preferably ask me to add it to
this list so we dont get different-but-similar terms. Note that i am pretty much on purpose
laying down exactly how files are organized.

Make a the-project/doc/info/ dir and a the-project/doc/info that file contains a
 keyword-value-list where `:asd-license` indicates what to fill the `:license` entry of the
asd-file. If it exists the-project/doc/info/header.txt contains the header that, if exists is 
attached on top of each file. (For instance copyright info.) 

TODO about this is to make the header more flexible(arbitrary function to produce one?), and
 streamlining the process a bit.(make some of the directories automatically)

Then ensure `:package-project` system is loaded. While in the file with emacs run the function:

    (defun cl-scan-expr ()
      (interactive)
      (slime-interactive-eval
       (concatenate 'string "(package-project:auto-update \"" (buffer-file-name) "\")")))

You can bind it to a key combination, of course `(global-set-key "\M-s" 'cl-scan-expr)` 
(Actually would be better if that was lisp-only mode)

To also get autodocumentation use the `:also` keyword and write a function to insert one.
 As said, gil is not yet available, so instead use the provided documentation-template one:

    (defun cl-scan-expr ()
      (interactive)
      (slime-interactive-eval
      (concatenate 'string "(let ((for-gil-xml-like:*tab-element* \"  \"))
      (package-project:auto-update \""
      		(buffer-file-name) "\" 
    :also (package-project-documentation-template:also)))\"")))

Note that documentation-template is a .. template. You still have to fill stuff in, which makes
it infact unsuitable for completely autodocumenting each time. This situation is easily mended,
someone just has to alter/fork that project to not be a template. So you can easily 
automatically add those, instead of editing it as a template, which is expedient, but more
 primitive than i'd like.

`:also` is an arbitrary function depending on the package name, project directory, and the
 info left in theproject/doc/info/info.